<project
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.lenzi</groupId>
	<artifactId>fstore</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>FStore Maven Webapp</name>
	<url>http://maven.apache.org</url>
	
	<!-- 
	Build properties.
	-->
	<properties>
	
		<java.version.source>1.8</java.version.source>
		<java.version.target>1.8</java.version.target>
	
		<version.junit>4.12</version.junit>
		
		<version.mockito>1.9.5</version.mockito>
		
		<version.aspectj>1.8.5</version.aspectj>
		
		<version.logback>1.1.3</version.logback> <!-- was 1.1.2 5/28/2015-->
		
		<version.joda.time>2.7</version.joda.time>
		
		<version.google.guava>18.0</version.google.guava>
		
		<version.apache.tomcat.embed>8.0.26</version.apache.tomcat.embed>
		<version.apache.commons.io>2.4</version.apache.commons.io>
		<version.apache.commons.fileupload>1.3.1</version.apache.commons.fileupload>
		<version.apache.commons.lang3>3.4</version.apache.commons.lang3> <!-- was 3.3.2 5/28/2015 -->
		<!-- http://cxf.apache.org/docs/31-migration-guide.html -->
		<version.apache.cxf>3.1.3</version.apache.cxf> <!-- was 3.1.1 10/29/2015 -->
		<version.apache.tika>1.10</version.apache.tika> <!-- was 1.9 10/29/2015 -->
		<version.apache.http.httpclient>4.5.1</version.apache.http.httpclient>
		
		<!-- last version is 1.9.13, distributed in July 2013. Replaced by jackson-jaxrs-json-provider in group com.fasterxml.jackson.jaxrs -->
		<!--
		<version.jackson.jaxrs>1.9.13</version.jackson.jaxrs>
		-->
		<version.jackson.json.provider>2.6.3</version.jackson.json.provider>
		<version.jackson.databind>2.6.3</version.jackson.databind> <!-- was 2.6.0 10/29/2015 -->
		
		<version.javax.inject>1</version.javax.inject>
		<version.javax.servlet>3.1.0</version.javax.servlet>
		<version.javax.jsr311.version>1.1.1</version.javax.jsr311.version>
		<version.javax.jstl.api>1.2.1</version.javax.jstl.api>
		<version.javax.jstl>1.2</version.javax.jstl>
		
		<version.ehcache>2.10.1</version.ehcache>
		
		<version.spring>4.2.2.RELEASE</version.spring> <!-- was 4.1.7.RELEASE 10/29/2015 -->
		<version.spring.security>4.0.3.RELEASE</version.spring.security>
		
		<!-- was 4.3.10.Final 10/29/2015 -->
		<!-- was 5.0.2.Final 1/15/2016 -->
		<version.hibernate>5.0.7.Final</version.hibernate>
		<!-- not sure if hibernate jpa is needed -->
		<version.hibernate.jpa>1.0.0.Final</version.hibernate.jpa>
		
		<version.jdbc.postgres>9.4.1207.jre7</version.jdbc.postgres> <!-- was 9.1-901-1.jdbc4, from older artifact with group id 'postgresql' -->
		<version.jdbc.oracle>11.2.0.4</version.jdbc.oracle> <!-- was 10.2.0.2 5/28/2015 -->
		
	</properties>
	
	<profiles>
	
		<!-- deployment on mac, using postgresql -->
		<profile>
			<id>lenzi.mac.postgresql</id>
			<properties>
				<property.file>lenzi.mac.postgresql.properties</property.file>
			</properties>
		</profile>
		
		<!-- deployment on work pc, with using oracle (ecogtst) -->
		<profile>
			<id>eamrf.desktop.oracle</id>
			<properties>
				<property.file>eamrf.desktop.oracle.properties</property.file>
			</properties>
		</profile>
		
		<!-- deployment on work pc, with local postgresql -->
		<profile>
			<id>eamrf.desktop.postgresql</id>
			<properties>
				<property.file>eamrf.desktop.postgresql.properties</property.file>
			</properties>
		</profile>		
		
		<!-- deployment on ecog2 -->
		<profile>
			<id>eamrf.ecog2.oracle</id>
			<properties>
				<property.file>eamrf.ecog2.oracle.properties</property.file>
			</properties>
		</profile>		
		
	</profiles>
	
	<dependencies>
	
		<!-- Unit testing -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${version.junit}</version>
			<scope>test</scope>
		</dependency>
		
		<!-- unit test mocking -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>${version.mockito}</version>
		</dependency>		
				
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${version.aspectj}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${version.aspectj}</version>
			<scope>test</scope>
		</dependency>
		
		<!--
		Need embedded tomcat because we use web sockets in our JUnit tests
		Resolves error message: No suitable default RequestUpgradeStrategy found
		-->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-websocket</artifactId>
			<version>${version.apache.tomcat.embed}</version>
			<scope>test</scope>
		</dependency>
				
		<!-- Logging -->		
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${version.logback}</version>
		</dependency>
		
		<!-- Date & time library -->
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>${version.joda.time}</version>
		</dependency>
		
		<!-- Google's excellent Guava lib -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${version.google.guava}</version>
		</dependency>
		
		<!-- Apache Commons -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${version.apache.commons.io}</version>
		</dependency>
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>${version.apache.commons.fileupload}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${version.apache.commons.lang3}</version>
		</dependency>
		
		<!-- Javax -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>${version.javax.inject}</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${version.javax.servlet}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
	        <groupId>javax.servlet</groupId>
	        <artifactId>jstl</artifactId>
	        <version>${version.javax.jstl}</version>
	    </dependency>
		<!--
		<dependency>
			<groupId>javax.servlet.jsp.jstl</groupId>
			<artifactId>javax.servlet.jsp.jstl-api</artifactId>
			<version>${version.javax.jstl.api}</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp.jstl</groupId>
			<artifactId>jstl-api</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp.jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>${version.javax.jstl}</version>
		</dependency>
		-->

		
		<!-- Spring -->
		<!--
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${version.spring}</version>
		</dependency>
		-->
		<!-- Spring-webmvc has dependency on many other spring components. No need to include them separately. -->
		<!--
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${version.spring}</version>
		</dependency>
		-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${version.spring}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${version.spring}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${version.spring}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${version.spring}</version>
		</dependency>
		<!-- web socket support -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-websocket</artifactId>
			<version>${version.spring}</version>
		</dependency>
		<!-- check if this is needed -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-messaging</artifactId>
			<version>${version.spring}</version>
		</dependency>
		<!-- Spring Security Core -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${version.spring.security}</version>
		</dependency>
		<!-- Spring Security Config -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${version.spring.security}</version>
		</dependency>
		<!-- Spring Security ACL, for domain object security -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-acl</artifactId>
			<version>${version.spring.security}</version>
		</dependency>
		<!-- Use some classes in this package for caching (with acl security) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${version.spring}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${version.spring}</version>
		</dependency>

		<!-- caching framework. we use this for spring security acl -->
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>${version.ehcache}</version>
		</dependency>
					

		<!-- used in unit tests -->
		<!--
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${version.spring}</version>
		</dependency>
		-->

		<!--
		Hibernate
		
		In Hibernate ORM 5.x (not 5.0), the hibernate-core and hibernate-entitymanager artifcats are merged into one.
		-->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${version.hibernate}</version>
			<classifier/>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${version.hibernate}</version>
			<classifier/>
		</dependency>
		<!-- not sure if this is needed -->
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.1-api</artifactId>
			<version>${version.hibernate.jpa}</version>
			<classifier/>
		</dependency>
		<!-- For generating JPA meta models for type safe queries. -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<version>${version.hibernate}</version>
		</dependency>
	
		<!-- Postgres JDBC driver -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${version.jdbc.postgres}</version>
		</dependency>
		<!-- old artifact
		<dependency>
			<groupId>postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${version.jdbc.postgres}</version>
		</dependency>
		-->
		
		<!-- Oracle JDBC Driver -->
		
		<!-- old version -->
		<!--
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc14</artifactId>
			<version>${version.jdbc.oracle}</version>
		</dependency>
		-->
		<dependency>
		  <groupId>com.oracle</groupId>
		  <artifactId>ojdbc6</artifactId>
		  <version>${version.jdbc.oracle}</version>
		</dependency>		
		
		<!-- Apache CXF web services -->
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxrs</artifactId>
			<version>${version.apache.cxf}</version>
		</dependency>
		
		<!-- Jax-RS provider for JSON content type, based on Jackson JSON processor's data binding functionality. -->
		<!-- last version is 1.9.13, distributed in July 2013. Replaced by jackson-jaxrs-json-provider in group com.fasterxml.jackson.jaxrs -->
		<!--
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-jaxrs</artifactId>
			<version>${version.jackson.jaxrs}</version>
		</dependency>
		-->
		
		<!-- replacement for artifact jackson-jaxrs in group org.codehaus.jackson -->
		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-json-provider</artifactId>
			<version>${version.jackson.json.provider}</version>
		</dependency>
		
		<!-- possibly need for our websocket messaging controller -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${version.jackson.databind}</version>
		</dependency>		

		<!-- JSR-311 RESTful Services Specification -->
		<!-- 11.2.2015 - not working on unix (ecog2). see if this helps.
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>jsr311-api</artifactId>
			<version>${version.javax.jsr311.version}</version>
		</dependency>
		-->
		
		<!-- apache tika, file mime type detection -->
		<dependency>
			<groupId>org.apache.tika</groupId>
			<artifactId>tika-core</artifactId>
			<version>${version.apache.tika}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tika</groupId>
			<artifactId>tika-parsers</artifactId>
			<version>${version.apache.tika}</version>
		</dependency>
		
		<!-- Used by clases in org.lenzi.fstore.exteral.http package -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>${version.apache.http.httpclient}</version>
		</dependency>		
		
	</dependencies>
	
	<build>
		
		<!-- final build file name (for war, or jar) -->
		<finalName>fstore</finalName>
		
		<!-- property file used for filtering during build process -->
		<filters>
			<filter>${property.file}</filter>
		</filters>
		
		<!-- define src/main/resources to filter  -->
		<resources>
		
			<!-- filter java, xml, and properties files from main source folder -->
			<resource>
				<directory>${basedir}/src/main/java</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.java</include>
					<include>**/*.xml</include>
					<include>**/*.properties</include>
				</includes>
			</resource>
			
			<!-- filter xml and property files from resources folder -->
			<resource>
				<directory>${basedir}/src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.xml</include>
					<include>**/*.properties</include>
				</includes>
			</resource>
			
			<!-- make sure we get other resource from resources folder, but don't filter them (breaks binary files) -->
			<resource>
				<directory>${basedir}/src/main/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<exclude>**/*.xml</exclude>
					<exclude>**/*.properties</exclude>
				</excludes>
			</resource>		
			
			<!--
			<resource>
				<directory>${basedir}/src/test/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.xml</include>
					<include>**/*.properties</include>
				</includes>
			</resource>
			-->
				
		</resources>
		
		<!-- define src/test/resources to filter  -->
		<testResources>
		
			<testResource>
				<directory>${basedir}/src/test/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.xml</include>
					<include>**/*.properties</include>
				</includes>			
			</testResource>
		
		</testResources>
		
		<plugins>
		
			<plugin>
			    <groupId>org.apache.maven.plugins</groupId>
			    <artifactId>maven-compiler-plugin</artifactId>
			    <version>3.1</version>
			    <configuration>
			        <source>${java.version.source}</source>
			        <target>${java.version.target}</target>
			        <!-- need this line for maven processor plugin to correctly generate metamodels without complaining of duplicate classes -->
			        <compilerArgument>-proc:none</compilerArgument>
			    </configuration>
			</plugin>
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<warName>${war.name}</warName>
					<!-- we use java config to bootsrap the application -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<webResources>
						<resource>
							<filtering>true</filtering>
							<directory>${basedir}/src/main/webapp/WEB-INF</directory>
							<includes>
								<include>**/*.xml</include>
							</includes>
							<targetPath>WEB-INF</targetPath>
						</resource>
						<!-- filter application specific javascript files (not 3rd party javascript libraries) -->
						<resource>
							<filtering>true</filtering>
							<directory>${basedir}/src/main/webapp/assets/scripts</directory>
							<includes>
								<include>**/*.js</include>
							</includes>
							<targetPath>assets/scripts</targetPath>
						</resource>
					</webResources>
				</configuration>
			</plugin>			
		
			<!--
			For generating JPA 2.0 meta models to be used with criteria API
			We use Hibernate's meta model generation API, included as a dependency above
			-->
			<plugin>
				<groupId>org.bsc.maven</groupId>
				<artifactId>maven-processor-plugin</artifactId>
				<version>2.2.0</version>
				<executions>
					<execution>
						<id>process</id>
						<goals>
							<goal>process</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<processors>
          						<processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>
        					</processors>
							<outputDirectory>
								src/generated/java
							</outputDirectory>
							<compilerArguments>
								-source ${java.version.source} -target ${java.version.target}
							</compilerArguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
		
		</plugins>
		
	</build>

</project>
