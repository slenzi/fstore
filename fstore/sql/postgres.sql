drop sequence TEST.FS_NODE_ID_SEQUENCE;
drop sequence TEST.FS_LINK_ID_SEQUENCE;	
drop sequence TEST.FS_PRUNE_ID_SEQUENCE;
drop sequence TEST.FS_TREE_ID_SEQUENCE;

drop index TEST.fs_parent_depth_child_idx;
drop index TEST.fs_child_parent_depth_idx;	

drop table TEST.FS_NODE;
drop table TEST.FS_CLOSURE;	
drop table TEST.FS_PRUNE;
drop table TEST.FS_TREE;
drop table TEST.FS_TEST_NODE;

create table TEST.FS_NODE ( 
	NODE_ID NUMERIC(15,0) NOT NULL, 
	PARENT_NODE_ID NUMERIC(15,0) NOT NULL, 
   NODE_TYPE CHARACTER VARYING(100) NOT NULL, 
	NAME CHARACTER VARYING(250) NOT NULL, 
	CREATION_DATE TIMESTAMP NOT NULL, 
	UPDATED_DATE TIMESTAMP NOT NULL, 
	PRIMARY KEY (NODE_ID) 
);

create table TEST.FS_CLOSURE ( 
	LINK_ID NUMERIC(15,0) NOT NULL, 
	PARENT_NODE_ID NUMERIC(15,0) NOT NULL, 
	CHILD_NODE_ID NUMERIC(15,0) NOT NULL, 
	DEPTH NUMERIC(5,0) NOT NULL, 
	PRIMARY KEY (LINK_ID) 
);

create table TEST.FS_PRUNE ( 
	PRUNE_ID NUMERIC(15,0) NOT NULL, 
	NODE_ID NUMERIC(15,0) NOT NULL, 
	PRIMARY KEY (PRUNE_ID,NODE_ID) 
);

create table TEST.FS_TREE ( 
	TREE_ID NUMERIC(15,0) NOT NULL, 
	ROOT_NODE_ID NUMERIC(15,0) NOT NULL, 
	NAME CHARACTER VARYING(250) NOT NULL, 
	DESCRIPTION CHARACTER VARYING(2000), 
	CREATION_DATE TIMESTAMP NOT NULL, 
	UPDATED_DATE TIMESTAMP NOT NULL, 
	PRIMARY KEY (TREE_ID) 
);

create table TEST.FS_TEST_NODE ( 
	NODE_ID NUMERIC(15,0) NOT NULL, 
	TEST_VALUE CHARACTER VARYING(250), 
	PRIMARY KEY (NODE_ID) 
);

create unique index fs_parent_depth_child_idx on TEST.fs_closure(parent_node_id,depth,child_node_id);
create unique index fs_child_parent_depth_idx on TEST.fs_closure(child_node_id,parent_node_id,depth);	

CREATE SEQUENCE TEST.FS_NODE_ID_SEQUENCE  
INCREMENT BY 1 
START WITH 1 
CACHE 10  
NO CYCLE;	

CREATE SEQUENCE TEST.FS_LINK_ID_SEQUENCE  
INCREMENT BY 1 
START WITH 1 
CACHE 10  
NO CYCLE;

CREATE SEQUENCE TEST.FS_PRUNE_ID_SEQUENCE  
INCREMENT BY 1 
START WITH 1 
CACHE 10  
NO CYCLE;

CREATE SEQUENCE TEST.FS_TREE_ID_SEQUENCE  
INCREMENT BY 1 
START WITH 1 
CACHE 10  
NO CYCLE;